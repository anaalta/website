%section.hero-splash{style: "background-image: url(#{image_path("backgrounds/students-overhead-discussion.jpg")});"}
  .container
    .centered-row
      %h1 Learn Ruby Online
      %h3 Lesson 15: Scope

%section
  .container
    .video-row
      .video-wrapper
        %iframe{src: "https://www.youtube.com/embed/WXf3yoAmsLc", frameborder: 0, allowfullscreen: true}
  .container
    .centered-row
    .centered-row
      %dl
        %dt LEARNING OUTCOMES
        %dd Understand what scope is
    .centered-row
      .button-row
        %p= link_to "Next lesson", "/pps-prep/petri-dish", class: "button button--horizontal"
    .centered-row
      .button-row
        %p= link_to "Previous lesson", "/pps-prep/methods", class: "button button--horizontal"

%section.hero-splash{style: "background-image: url(#{image_path("backgroundsphoto-wall.jpg")});"}
  .container
    .centered-row
      %h3 Video transcription
      %p Let's take a method. Now imagine there's actually a wall around it. This wall, or boundary limits the scope of where the meeting variable is available to be accessed. To put it clearly, if you want to access message you must be inside the greeting method at the time. Let's put this message inside a class. Now if we had a second method inside our Discussion class. This code suggests that our read_the_message method wants to access the message variable defined within the greeting method. As we've seen, this can't happen because message is locked inside greeting. Message is a local variable. What we need is an instance variable. So that message can be available anywhere within the class Discussion, we can simply put an @ symbol in front of it. By changing our local variable to an instance variable, we have altered the scope. Scope is an important topic in programming, and one you will meet often, so spend some time getting comfortable with this - and practice in a REPL accessing values.
