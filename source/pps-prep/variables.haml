%section.hero-splash{style: "background-image: url(#{image_path("backgrounds/students-overhead-discussion.jpg")});"}
  .container
    .centered-row
      %h1 Learn Ruby Online
      %h3 Lesson 13: Variables

%section
  .container
    .video-row
      .video-wrapper
        %iframe{src: "https://www.youtube.com/embed/BHPPoW6McbM", frameborder: 0, allowfullscreen: true}
  .container
    .centered-row
    .centered-row
      %dl
        %dt LEARNING OUTCOMES
        %dd Understand what a variable is
        %dd Explain what the assignment operator does
        %dd How to define a variable in Ruby
        %dd Recognise that a new value will overwrite the contents of your variable
        %dd Be able to retrieve a value by calling the variable you stored it in
    .centered-row
      %dl
        %dt EXERCISES
        %dd 1. Create a variable
        %dd 2. Assign a value to that variable
        %dd 3. Retrieve that value by calling the variable's name (in the computer - not verbally)
        %dd 4. Assign another value to the same variable
        %dd 5. Hypothesize about what you will see now when you call the variable again
        %dd 6. Repeat
    .centered-row
      .button-row
        %p= link_to "Next lesson", "/pps-prep/methods", class: "button button--horizontal"
    .centered-row
      .button-row
        %p= link_to "Previous lesson", "/pps-prep/classes", class: "button button--horizontal"

%section.hero-splash{style: "background-image: url(#{image_path("backgroundsphoto-wall.jpg")});"}
  .container
    %h3 Video transcription
    %p So let’s make a class of shutter and now, if I try and access a shutter, we can see here, there’s some sort of error. So what is Ruby telling us with this helpful error message. We see here that it believes that shutter is some sort of uninitialized constant. What’s a constant in Ruby? A constant is a word that begins with a capital letter. So I happen to know that the way to fix this is to run our code and now if I type shutter, Ruby should know what we’re talking about, which is does so that’s great!
    %p Let’s make a new shutter object. And let’s make another one and another one and so forth. We can see here that these shutter objects have some sort of identifying number. So we can tell that each one of these objects is actually different, even though they look very similar. If I wanted to refer back to this object here or even this object here, I’d have no way of doing it, because although I can create shutter objects, unless I can store them somewhere, they’re instantly lost. The way to store object in Ruby is to assign them to variables so let’s make a variable right now.
    %p I’m going to create a variable called objects. I’m going to use the assignment operator which in Ruby is a single equals and I’m going substantiate a new shutter object and place it inside the object variable. My hypothesis is that if I type object which is the name of the variable we just created and hit return, Ruby will bring me this particular shutter object. And we can see by the way that the numbers inside the identifying objects are lined up, that that’s exactly what happened.
    %p One very important thing to be aware of when it comes to variable is that many people explain variables as boxes in which you store things. I find this definition to be a bit problematic, let’s see why. Here’s our object variable, now what happens if I take object and I add a word to it, let’s say “Hello”? If I hit return and then type object,what do we expect to see? If you said that word “hello”, you’re absolutely right. What happens is that this shutted object has now been overwritten and completely lost. If object was like a box, if I added an item to it, as long as it was big enough, it would hold both the original object and the word hello. I find it much more accurate to think of variables as tentacles. They certainly hold objects for you, but once you pass it a new thing, it has to drop its existing value in order to accommodate the new value.
    %p Let’s get back to our shutter class. As we’ve discussed previously, the 2 ingredients for an object are state and behaviour. One thing I would love to see in my shutter class is the ability to see what state the shutter is currently at. If we create a variable called shutter state and assign to it a value of open, what I’d like to be able to do is ask my shutter object if at any point what is the shutter state and receive “open” if it’s open or “closed” if it’s closed.
    %p So let’s take a look at our class definition over here. It starts on line 1 with the keyword “class” and it ends on line 3 with the keyword “end”. Let’s define a variable in here. If I save this and I run it, if I type shutter.new, I have a new shutter. Let’s create a variable and store a new shutter object inside of it. How do we access the value of shutter state? Well currently, we can’t. As it turns out, in order to access values inside of a class, we need methods.
