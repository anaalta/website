%section.hero-splash{style: "background-image: url(#{image_path("backgrounds/students-overhead-discussion.jpg")});"}
  .container
    .centered-row
      %h1 Learn Ruby Online
      %h3 Lesson 10: REPL.it

%section
  .container
    .video-row
      .video-wrapper
        %iframe{src: "https://www.youtube.com/embed/R_CQpKtuvFk", frameborder: 0, allowfullscreen: true}
  .container
    .centered-row
    .centered-row
      %dl
        %dt LEARNING OUTCOMES
        %dd Have REPL.it setup and ready to go
    .centered-row
      .button-row
        %p= link_to "Next lesson", "/pps-prep/dot-notation", class: "button button--horizontal"
    .centered-row
      .button-row
        %p= link_to "Previous lesson", "/pps-prep/diagramming", class: "button button--horizontal"

%section.hero-splash{style: "background-image: url(#{image_path("backgroundsphoto-wall.jpg")});"}
  .container
    %h3 Video transcription
    %p OK so one of thing we need to do to get started is have an actual editor to code in. A lot of people have different types of machines so you might have a windows machine, a mac, a linux setup and the differences between these different environments can make it very confusing to get started so to keep the playing field nice and even we’ve decided to do the course in an online tool which is free called REPL.IT
    %p If I click my address bar up here, you can see here the address you want to go to is REPL.IT, sign up to an account and this is the first screen you should be greeted with. We haven’t got any saved session so i’m going to click on the start coding now button and I’m going to go for Ruby. Ruby is an excellent programming language. It’s very beginner friendly and very expressive so we’re big fans.
    %p If we click on the untitled text box up here, this allows us to give our project a name, I’m going to call it first coding example. And you can see here that it says rename successful so I guess that change has taken place. If we take a quick look over here on the left, there’s a cog and I’m going to click on that. That’s going to give us access to our settings. So we can start a new session if we weren’t happy with this one. We can change the layout from side to side to stacked. I prefer side by side. You can change the colour scheme from light to dark. We can change the font size, we can change the indent type from tabs to spaces, I recommend keeping it on spaces with an indent size of 2. This is just something that is kind of an agreed standard in the Ruby community. In terms of key bindings, unless you know how to use vim or emacs, I would suggest keeping it on default otherwise your text editor is going to do strange things and under wrapping here, make sure this is set to soft wrap. The reason for this is if we go to Lorem Ipsum and we take a lengthy line of text. If I click on none for the moment just to show you what will happen, I’ll paste this in and you have to scroll all the way along to read the end of the line so if we click on soft wrap, what this will do is display the whole line in one go, it kind of squashes it up and you can tell from this tiny indention and the fact the line number is 1, if I click here return it’ll make a second line 2 and return here will show you a line 3 has been created, we don’t want to do that as it might affect our code. I know this is just fake latin at the moment but we will be writing code soon, so ultimately this displays everything on the screen at once. If you turn if off, you’re going to be doing a lot of scrolling. Let’s get rid of this because we won’t need it. Down here we have autocomplete, I suggest setting this to disable, the reason for that is I believe this will rob you of an opportunity to learn some syntax. When you let your editor finish your sentence, it’s doing some of the thinking for you so, I would keep this set to disabled. Once you’ve picked your settings and you’re happy with them, click on this cog and we should be back in our editor.
    %p Now, this white section here, this is the text editor. Here you can make programs, here you can make methods so define a method called “hello” for example you can have a string that will say “hi” and you can type end and close that method off and you could save this and keep it for later, however, this is not really the part of the interface I want you to be concentrating on too much at the moment. One of the reason we’re using why we’re using REPL.IT is because it has excellent repl support and this dark screen over here is the REPL. R.E.P.L is an acronym, it stands for read evaluate print and loop. Now what that actually means is that it allows you to have a conversation with the programming language interpreter itself and this is really great because this actually gives you Ruby’s eyes. I’m going to hit cmd+K on my computer and it’ll clear the screen of that surplus information and we’re actually going to write our first piece of code right now. So, I’m going to type 1 + 1 and before I hit the return key, we’re going to introduce a very very important concept. So we believe it’s incredibly important to build this habit in from day 1. This is something called the scientific method. The  idea behind it is basically you want to have a good idea of why you’re about to do something. So I’m typing 1 + 1 into my editor and my hypothesis is that when I hit return, it’s going to give me the answer back and I’m expecting to see the number 2 so I’m going to push return and I can see I got the number 2 back. Now, if I didn’t have a hypothesis and I just hit return and the number 2 came back, it would mean that I’m not very engaged or thinking about what I’m doing. If I was expecting to see the number 2 back and the number 3 was returned, i would the know that I was needed to go back to this line here and actually investigate what I’d written in light of the new result. This hypothesis driven thinking is incredibly important and we’re going to keep on reminding you about this throughout the course. I’m going to push cmd+K, if you’re on a Windows machine that might be ctrl+K and that clears the screen, I’m going to move this window over a bit more and I'm going to demonstrate a way to use the editor.
    %p You can also do 1 + 1 on this side and then click on the run button here. What’s our hypothosis? We’re expecting to see the number 2 appear over here in the REPL and that’s exactly what happened. The benefit of doing it this way is that you can save this code for later, however one of the biggest mistakes that new programmer make is that they refuse to use the REPL to write actual code. Instead, they write it all in the editor, you might have heard of things like atom or sublime text because always want to be able to save their code, however, if you get in the habit of treating code as ephemeral or disposable, it means you’re less attached to it and you’re more open to experimentation and you’re more open to improving your code later on. I’m also a big fan of typing things out as many times as possible as it helps you internalize the syntax and gets you more family with what's going on, The reply is great for experimenting with your code and finding out what Ruby is going to allow so for example if I take a string such as “Hi how are you?” If I hit return, my hypothesis is that Ruby is going to return that string back to me, and that’s exactly what it did. OK so that’s a brief overview of the REPL.IT interface, we hope you’re going to find it a lovely tool to work with and we’re going to be using it for the rest of the course.
    %p I’ll see you in the next lecture.

