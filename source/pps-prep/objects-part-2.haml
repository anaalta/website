%section.hero-splash{style: "background-image: url(#{image_path("backgrounds/students-overhead-discussion.jpg")});"}
  .container
    .centered-row
      %h1 Learn Ruby Online
      %h3 Lesson 5: Objects Part: 2

%section
  .container
    .video-row
      .video-wrapper
        %iframe{src: "https://www.youtube.com/embed/ccT7BJoSMls", frameborder: 0, allowfullscreen: true}
  .container
    .centered-row
    .centered-row
      %dl
        %dt LEARNING OUTCOMES
        %dd Be able to define behvaiours
        %dd Understand the difference between state and behaviour
    .centered-row
      .button-row
        %p= link_to "Next lesson", "/pps-prep/decomposition-part-1", class: "button button--horizontal"
    .centered-row
      .button-row
        %p= link_to "Previous lesson", "/pps-prep/behaviours", class: "button button--horizontal"

%section.hero-splash{style: "background-image: url(#{image_path("backgroundsphoto-wall.jpg")});"}
  .container
    %h3 Video transcription
    %p So weâ€™ve talked a little about what an object is in the physical world, and even mapped the computing concepts of state and behaviour onto the common camera, but how does this work with a computer, and why is all of this relevant?
    %p Within the world of programming, an object is a representation of something else. This object has a kind of memory known as state and some code which can modify this memory. The code that modifies state is grouped into units known as methods. So, put simply, methods interact with state and both of these belong to an object. Object oriented languages organise related data and the way manipulating that data into an abstract idea called an object.
    %p But how do we know what object we need to program? For this, let's learn the skill of decomposition.
