%section.hero-splash{style: "background-image: url(#{image_path("backgrounds/students-overhead-discussion.jpg")});"}
  .container
    .centered-row
      %h1 Learn Ruby Online
      %h3 Lesson 14: Methods

%section
  .container
    .video-row
      .video-wrapper
        %iframe{src: "https://www.youtube.com/embed/ta-oRNyt8Hs", frameborder: 0, allowfullscreen: true}
  .container
    .centered-row
    .centered-row
      %dl
        %dt LEARNING OUTCOMES
        %dd Understand what a method is
        %dd Be comfortable explaining how to use a method
        %dd Know how to define a method in Ruby
        %dd Recognise that methods have return values
        %dd Have the ability to identify a return value in the REPL
        %dd Be able to create a method that returns the value stored inside a variable
    .centered-row
      %dl
        %dt EXERCISES
        %dd 1. Create a method
    .centered-row
      .button-row
        %p= link_to "Next lesson", "/pps-prep/scope", class: "button button--horizontal"
    .centered-row
      .button-row
        %p= link_to "Previous lesson", "/pps-prep/variables", class: "button button--horizontal"

%section.hero-splash{style: "background-image: url(#{image_path("backgroundsphoto-wall.jpg")});"}
  .container
    %h3 Video transcription
    %p Let’s see how to define a method. The first thing we need is the def keyword that stands for define. We then need to give our method a name, I’m going to call this one greeting. I’m going to hit return and then I’m going to type the keyword return and then the string “hi” then I’m going to hit return again and type the end keyword to signal to Ruby that i’ve finished to define my method, and hit return. This arrow with the word greeting, this means that Ruby has successfully internalised a new method called greeting. My hypothesis is that if I type greeting and hit return, I should see the string “hi” be returned back to me. This is a return value. If we look at our method, see this line here? This is the part where we specify the return value of the method.
    %p Let’s try it again.
    %p Again, same result. When I type greeting and hit return, my hypothesis is I’ll see this screen, “hello, how are you?” This means by redefining my method, I have overwritten the previous greeting message. In many language, you need the return keyword, however, Ruby actually gives us something called implicit return. So if I type greeting, I should see the string “good evening”.
    %p Let’s use our new found ability to build methods to get information out of a class. I’m going to create a new class called child. Inside this class, I’m going to create a method called “get_eye_colour” and i’m going to have it return the colour blue as a string. I’ll save this and run it and now if I type child into the REPL, Ruby knows what I’m talking about. So I’m going to create a new instance of this child class and i’m going to store it in a variable and I’m going to call that variable “dan”. I’m going to hit return and my hypothesis is that we’ll have a new child object inside the variable “dan”. If I use dot notation and ask dan for his eye colour, I actually get a result, which is fantastic. However, we’ll notice something slightly strange about eh sequencing here. First I created a child and then and only when I asked for it’s eye colour, did the eye colour come into existence. What if we wanted the child object to have blue eyes at birth? Then we’d need to use something called the initialise method. So let’s go over to our class and add a new method called initialise. Now what I’m going to do is create a variable called “eye_colour” and I’m going to assign the value blue to it and I’m going to comment out our get_eye_colour method for the moment. Comments are ways to hide code from the Ruby interpreter. I’m going to save this and run it. Now any new child objects will only know about the initialise method as the get_eye_colour method is hidden from Ruby. So we can see that Ruby still knows what the child class is and now, if I create a new variable and place a new child object in the Alex variable, we still have the same problem of not being able to access the eye colour. To prove that, we can see here we get an error: undefined method: ‘get_eye_colour’ for child, so let’s fix that. I’m going to uncomment out this method, and now, instead of just returning the word “blue” I’m going to return the eye colour variable that is defined on line 4 and because it’s Ruby, and we have implicit return, we can afford to get rid of the return keyword. We’ll save it and run it so that REPL receives the latest changes and if I create a new variable and parse in a new child object, let’s see if we can call the get_eye_colour on Jen. Let’s look at this error message. Ruby is telling us that we have an undefined local variable on eye_colour for child and rather unhelpfully gives us suggestions that are not going to work for us in this instance.
    %p Let’s take a look on line 8. Are there any typos? Have we misspelt “eye_colour”? It looks exactly the same as eye color on line 4 so what could be the problem? The problem is an issue of scope and we’ll discuss that in the next video.
