%section.hero-splash{style: "background-image: url(#{image_path("backgrounds/students-overhead-discussion.jpg")});"}
  .container
    .centered-row
      %h1 Learn Ruby Online
      %h3 Lesson 12: Classes

%section
  .container
    .video-row
      .video-wrapper
        %iframe{src: "https://www.youtube.com/embed/Ov1XgVWUVF0", frameborder: 0, allowfullscreen: true}
  .container
    .centered-row
    .centered-row
      %dl
        %dt LEARNING OUTCOMES
        %dd Understand that classes group related code
        %dd Be able to define a class in Ruby
        %dd Recognise what a <b>contant</b> is in Ruby
        %dd Describe the relationship between a class and an object
        %dd Know how to instantiate a class
        %dd Recall what an object looks like in the REPL
    .centered-row
      %dl
        %dt EXERCISES
        %dd 1. Fire up the REPL
        %dd 2. Define a <code class="language-ruby">class</code>
        %dd 3. Instantiate that <code class="language-ruby">class</code>
        %dd 4. Do this 3 or 4 times
    .centered-row
      .button-row
        %p= link_to "Next lesson", "/pps-prep/variables", class: "button button--horizontal"
    .centered-row
      .button-row
        %p= link_to "Previous lesson", "/pps-prep/dot-notation", class: "button button--horizontal"

%section.hero-splash{style: "background-image: url(#{image_path("backgroundsphoto-wall.jpg")});"}
  .container
    %h3 Video transcription
    %p In Ruby, the way to get an object is to have some sort of factory that will create the object for you. So let’s go to REPL.IT and start a new session, in Ruby. I’m going to clear the REPL and for demonstration purposes, I think I might use the editor this time around and so, when you want to have the ability to make lots of objects, you need to create a set of blueprints so that Ruby knows what you mean or what the characteristics of an object are.
    %p I’m going to go ahead and create a class and I’m going to give it a name and notice how I give it a name with uppercase beginning letter. I’m going to make a class called IceCream. You can call it IceCream with a capital C or Icecream with a lowercase C, the important part is that first letter is capitalised. I’m going to type “end” and this basically defines a class. What I’ve done here in the editor is I’ve created the ability to draw a circle and have the word IceCream in the middle of it, metaphorically speaking.
    %p So how would I go about actually drawing that circle with IceCream in the middle of it?
    %p Let’s go to the REPL and I’m going to double check that IceCream is still a thing, it is, and then I’m going to write IceCream.new and when I hit return, I’m expecting that Ruby is going to create a new object a new IceCrem object for me, which by my previous convention of diagramming will be like drawing an empty circle with the word IceCream in the middle of it. So while we see objects as circles, this is how Ruby sees them. Notice the hash sign and the angled bracket and then we see this. This is a constant, it’s called a constant when it has the uppercase letter at the beginning of it and we have this interesting combination of letters and numbers. It’s some sort of identifier. Now if I push the up arrow on my keyboard, it’ll let me run previous commands and if I hit return, it’ll create another IceCream object, so this has made a separate circle with IceCream in the middle of it and I can do it again and again and again and again and again and I can make as many IceCream objects as I like, this is going to make me extremely popular! However, this isn’t really helping us build out pinhole camera so I’m going to clear the screen and I’m going to go over here and I’m going to change this class IceCream to class shutter because I want to make new shutters for new pinholes cameras and I’m going to save this and I’m going run it and now my hypothesis is: Ruby should know what a shutter is and it should still have no idea what a Zebra is, not a clue.
    %p So now I can do shutter.new and make a new shutter object, it’s currently pretty useless but let’s move on and see if we can make it more useful. 
