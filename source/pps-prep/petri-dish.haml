%section.hero-splash{style: "background-image: url(#{image_path("backgrounds/students-overhead-discussion.jpg")});"}
  .container
    .centered-row
      %h1 Learn Ruby Online
      %h3 Lesson 16: Petri dish

%section
  .container
    .video-row
      .video-wrapper
        %iframe{src: "https://www.youtube.com/embed/w95WCrX0BXI", frameborder: 0, allowfullscreen: true}
  .container
    .centered-row
    .centered-row
      %dl
        %dt LEARNING OUTCOMES
        %dd Understand what scope is
    .centered-row
      .button-row
        %p= link_to "Previous lesson", "/pps-prep/scope", class: "button button--horizontal"

%section.hero-splash{style: "background-image: url(#{image_path("backgroundsphoto-wall.jpg")});"}
  .container
    .centered-row
      %h3 Video transcription
      %p A very common problem for new Object-Oriented Programmers is understanding where the user fits in to all of this. Well, for all intents and purposes, it doesn't. Pretty shocking, I know, but hear me out. The kind of programming we are doing is not about users, but stitching together a bunch of functions which can either take input, do some kind of action, provide some output - or any combination of all three. You might like to think of your program like some kind of Rube Goldberg machine where some sort of trigger starts a sequence of actions, and these all lead to some sort of grand end result. I personally like to think of my programs like a sort of Petri Dish, and I'm the scientist looking over, observing the methods working together within the boundary of the dish. When beginners obsess about where the user gets involved, things start to get complicated. You are the programmer. For now, let's assume you're the only person using this software - we'll build the user interaction in, if and when it suits us.
